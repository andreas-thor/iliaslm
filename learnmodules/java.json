{
	"title": "Java Lernmodul (aus JSON erzeugt)",
	"chapter": [
		{
			"name": "02_IMP",
			"title": "IMP: Imperative Programmierung",
			"page": [
				{
					"name": "overview",
					"title": "Übersicht",
					"outcome": [
						"Vorteile der Datenhaltung mittels Datenbanksystemen gegenüber Dateisystemen zu erklären",
						"die wesentlichen Eigenschaften relationaler Datenbanksysteme zu erläutern",
						"das Transaktionskonzept und die Transaktionseigenschaften (ACID) an einem Beispiel darzustellen",
						"praktische Einsatzszenarien den DBS-Einsatzformen OLTP und OLAP zuzuordnen"
					]
				},
				{
					"name": "Datentypen",
					"title": "Primitive Datentypen und Typumwandlung",
					"question": [
						{
							"type": "gap",
							"text": "Geben Sie jeweils den der Variablen nach der Ausführung vom gegebenen Java-Code an. Sollte es bei der Ausführung zu einem Fehler kommen (sowohl zur Compile- als auch Runtime) geben Sie 'Fehler' an!\n\n <code>int a = 130; a = a + 100;</code>? |100 ; 130 ; 200 ; ~230 ; Fehler|\n<code>int a = 130; a += 100;</code>? | 100 ; 130 ; 200 ; ~230 ; Fehler|\n<code>byte b = 50; b += 100;</code>? |~-106 ; 50 ; 100 ; 150 ; Fehler|\n<code>byte b = 50; b = b + 100;</code>? |-106 ; 50 ; 100 ; 150 ; ~Fehler|\n<code>byte b = 50; b = (byte) (b + 100);</code>? |~-106 ; 50 ; 100 ; 150 ; Fehler|\n<code>short c = 1000; c *= c;</code>? |1000 ; ~16960 ; 1000000 ; Fehler|\n<code>char d = 'A'; d++;</code>? |A ; ~B ; a ; b ; Fehler|\n<code>char d = 'A'; d += '!';</code>? |A ; B ; a ; ~b ; Fehler|"
						},
						{
							"type": "gap",
							"text": "Gegeben ist die Variable <code>char d = 'A';</code>.\nWelchen Datentyp hat der Ausdruck <code>d+100</code>? |char ; ~int ; long|\nWelcher Datentyp kann bei der Zuweisung <code>[Datentyp] x = d + 100;</code> für die Variable <code>x</code> <u>nicht</u> angegeben werden? |~char ; int ; long|"
						},
						{ 
							"type": "gap",
							"text": "Gegeben sind die Variablen <code>int a = 130;</code> und <code>boolean e = true;</code>.\nGeben Sie für die folgenen Zuweisungen an, ob sie gültig sind!\n<code>e = a;</code> : |gültig ; ~nicht gültig|\n<code>e = (boolean)a;</code> : |gültig ; ~nicht gültig|\n<code>a = e;</code> : |gültig ; ~nicht gültig|\n<code>a = (int)e;</code> : |gültig ; ~nicht gültig|"
						},
						{ 
							"type": "gap",
							"text": "Welchen Wert hat <code>f</code> nach Ausführung von <code>int a = 130; float f = a;</code>? |0 ; 7.9 ; ~130.0 ; Fehler|\nWelchen Wert hat <code>a</code> nach Ausführung von <code>float f = 7.9f; a = f;</code>? |0 ; 7 ; 7.9 ; 8 ; 130 ; ~Fehler|\nWelchen Wert hat <code>a</code> nach Ausführung von <code>float f = 7.9f; a = (int)f;</code>? |0 ; ~7 ; 7.9 ; 8 ; 130 ; Fehler|\nWelchen Wert hat <code>a</code> nach Ausführung von <code>float f = -7.9f; a = (int) f;</code>? |0 ; ~-7 ; -7.9 ; -8 ; 130 ; Fehler|"
						}
					]
				}, 
				{
					"name": "Operatoren",
					"title": "Operatoren (Präzedenz, Assoziativität)",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben sind die folgenden drei Variablen: <code>boolean x = true; boolean y = true; boolean z = false;</code>\nGeben Sie die Werte der folgenden Ausdrücke an!\n\n<code>x && z</code>: |true ; ~false|\n<code>x &#x007C;&#x007C; z</code>: |~true ; false|\n<code>x &#x007C;&#x007C; y && z</code>: |~true ; false|\n<code>x &#x007C;&#x007C; (y && z)</code>: |~true ; false|\n<code>(x &#x007C;&#x007C; y) && z</code>: |true ; ~false|"
						},
						{
							"type": "gap",
							"text": "Gegeben sind die folgenden drei Variablen: <code>int a = 2; int b = 6; int c = 4;</code>\nGeben Sie die Werte der folgenden Ausdrücke an!\n\n<code>a * b / c</code>: |1 ; 2 ; ~3 ; 4|\n<code>(a * b) / c</code>: |1 ; 2 ; ~3 ; 4|\n<code>a * (b / c)</code>: |1 ; ~2 ; 3 ; 4|\n<code>b % c</code>: |1 ; ~2 ; 3 ; 4|\n<code>c % b</code>: |1 ; 2 ; 3 ; ~4|\n<code>b &lt; 2</code>: |true ; ~false ; 2 ; 6 ; 24|\n<code>b &lt;&lt; 2</code>: |true ; false ; 2 ; 6 ; ~24|\n<code>a == c</code>: |true ; ~false ; 2 ; 4|\n<code>a = c</code>: |true ;false ; 2 ; ~4|"
						}
					]
				}, 
				{
					"name": "EingabeAusgabe",
					"title": "Ein- und Ausgabe",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben sind die Variable <code>int alter = 6;</code> und <code>float spardose = 33.05;</code>.\nGeben Sie jeweils die Ausgaben der folgenden Anweisungen an:\n\n<code>System.out.println(alter + \" Jahre\");</code>: |alter Jahre ; ~6 Jahre ; Jahre|\n <code>System.out.println(spardose);</code>: |33.05 ; 33,05 ; 33.049999 ; 33,049999 ; ~33.04999923706055 ; 33,04999923706055|\n <code>System.out.printf(java.util.Locale.GERMAN, \"%.2f\", spardose);</code>: |33.05 ; ~33,05 ; 33.0500 ; 33,0500|\n <code>System.out.printf(java.util.Locale.US, \"%.2f\", spardose);</code>: |~33.05 ; 33,05 ; 33.0500 ; 33,0500|\n <code>System.out.printf(java.util.Locale.GERMAN, \"%7.2f\", spardose);</code> (Leerzeichen durch &blank; dargestellt): |&blank;&blank;&blank&blank;&blank;&blank;&blank;33,05 ; &blank;&blank;&blank;33,05 ; ~&blank;&blank;33,05 ; 33,05000 ; 33,0500000|"
						}, 
						{
							"type": "gap",
							"text": "Geben ist die Variable <code>java.util.Scanner sc = new java.util.Scanner(System.in);</code>\n \nWelchen Wert hat die Variable <code>s</code> nach Ausführung von <code>String s = sc.nextLine();</code>, wenn der Nutzer einfach nur die Eingabetaste drückt? | NULL ; ~ein Leerstring, d.h. mit keinem Zeichen ; ein String mit einem NewLine-Zeichen ; es kommt zu einem Fehler|\n\nWelchen Wert hat die Variable <code>t</code> nach Ausführung von <code>int t = sc.nextInt();</code>, wenn der Nutzer <code>7c</code> eingibt und die Eingabetaste drückt? | 0 ; 7 ; ~es kommt zu einem Fehler|"
						}
					]
				},
				{
					"name": "Wiederholung",
					"title": "Wiederholungen (FOR, WHILE)",
					"question": [
						{
							"type": "gap",
							"text": "Geben Sie jeweils die Ausgabe der folgenden FOR-Schleifen an!\n\n<code>for (int i=1; i<5; i++) System.out.print(i);</code> : |12 ; 13 ; 14 ; 23 ; 24 ; 34 ; 123 ; 124 ; 234 ; ~1234|\n<code>for (int i=1; i<5; i+=2) System.out.print(i);</code> : |12 ; ~13 ; 14 ; 23 ; 24 ; 34 ; 123 ; 124 ; 234 ; 1234|\n<code>for (int i=1; i<5; i*=2) System.out.print(i);</code> : |12 ; 13 ; 14 ; 23 ; 24 ; 34 ; 123 ; ~124 ; 234 ; 1234|\n<code>for (int i=1, k=3; i&lt;k; i+=2) System.out.print(k++);</code> : |12 ; 13 ; 14 ; 23 ; 24 ; ~34 ; 123 ; 124 ; 234 ; 1234|"
						},
						{
							"type": "gap",
							"text": "Gegeben Sie jeweils die Ausgabe der folgenden WHILE-Schleifen an!\n\n<code>int n = 1; while (n<4) { System.out.print(n); n = n + 1; }</code> : | 1 ; 2 ; 3 ; 4 ; 12 ; ~123 ; 1234 ; keine Ausgabe|\n<code>int n = 1; do { System.out.print(n); n = n + 1; } while (n<4)</code> : | 1 ; 2 ; 3 ; 4 ; 12 ; ~123 ; 1234 ; keine Ausgabe|\n<code>int n = 4; while (n<4) {System.out.print(n);  n = n + 1;}</code> : | 1 ; 2 ; 3 ; 4 ; 12 ; 123 ; 1234 ; ~keine Ausgabe|\n<code>int n = 4; do { System.out.print(n); n = n + 1;} while (n<4)</code> : | 1 ; 2 ; 3 ; ~4 ; 12 ; 123 ; 1234 ; keine Ausgabe|"
						},
						{
							"type": "gap",
							"text": "Gegeben Sie jeweils die Ausgabe der folgenden WHILE-Schleifen an!\n\n<code>int n = 0; while (n<4) { n++; if (n % 3 == 0) continue; System.out.print(n); }</code> : | 1 ; 12 ; 13 ; 14 ; 23 ; 24 ; 123 ; ~124 ; 234 ; 1234|\n<code>int n = 0; while (n<4) { n++; if (n % 3 == 0) break; System.out.print(n); }</code> : | 1 ; ~12 ; 13 ; 14 ; 23 ; 24 ; 123 ; 124 ; 234 ; 1234|"
						}
					]
				},
				{
					"name": "Bedingung",
					"title": "Bedingungen (IF, SWITCH)",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben ist eine Variable <code>int b=0;</code>. Geben Sie jeweils den Wert von <code>b</code> nach Ausführung des Codes an!\n\n<code>int a = 2; if (a % 2 == 0) { b = 1; }</code> : |0 ; ~1 ; 2 ; 5|\n<code>int a = 5; if (a % 2 == 0) { b = 1; }</code> : |~0 ; 1 ; 2 ; 5|\n<code>int a = 2; if (a % 2 == 0) { b = 1; } else { b = 2; }</code> : |0 ; ~1 ; 2 ; 5|\n<code>int a = 5; if (a % 2 == 0) { b = 1; } else { b = 2; }</code> : |0 ; 1 ; ~2 ; 5|"
						}, 
						{
							"type": "gap",
							"text": "Gegeben ist eine Variable <code>int b=0;</code>. Geben Sie jeweils den Wert von <code>b</code> nach Ausführung des Codes an!\n\n<code>int a = 2; b = (a % 2 == 0) ? 1 : 2;</code> : |0 ; ~1 ; 2 ; 5|\n<code>int a = 5; b = (a % 2 == 0) ? 1 : 2;</code> : |0 ; 1 ; ~2 ; 5|\n<code>int a = 2; b = (a % 2 == 0) ? 1 : b;</code> : |0 ; ~1 ; 2 ; 5|\n<code>int a = 5; b = (a % 2 == 0) ? 1 : b;</code> : |~0 ; 1 ; 2 ; 5|"
						},
						{
							"type": "gap",
							"text": "Gegeben ist folgendes SWITCH-Statement:\n<code>switch (a) {\n&nbsp;&nbsp;&nbsp;case 1: System.out.println(\"case 1\");\n&nbsp;&nbsp;&nbsp;case 2: System.out.println(\"case 2\"); break;\n&nbsp;&nbsp;&nbsp;case 3: System.out.println(\"case 3\"); break;\n&nbsp;&nbsp;&nbsp;default: System.out.println(\"default\");\n}</code>\n\nGeben Sie für die jeweiligen Werte von <code>a</code> an, welche Ausgabe SWITCH-Statement erzeugt:\n<code>a=0</code>: |case 1 ; case 2 ; case 3 ; ~default ; case 1 und case 2 ; case 1 und case 3 ; case 2 und case 3 ; case 1 und default ; case 2 und default ; case 3 und default|\n<code>a=1</code>: |case 1 ; case 2 ; case 3 ; default ; ~case 1 und case 2 ; case 1 und case 3 ; case 2 und case 3 ; case 1 und default ; case 2 und default ; case 3 und default|\n<code>a=2</code>: |case 1 ; ~case 2 ; case 3 ; default ; case 1 und case 2 ; case 1 und case 3 ; case 2 und case 3 ; case 1 und default ; case 2 und default ; case 3 und default|\n<code>a=3</code>: |case 1 ; case 2 ; ~case 3 ; default ; case 1 und case 2 ; case 1 und case 3 ; case 2 und case 3 ; case 1 und default ; case 2 und default ; case 3 und default|"
						}
					]
				}
			]
		},
		{
			"name": "03_PROC",
			"title": "PROC: Prozedurale Programmierung",
			"page": [
				{
					"name": "overview",
					"title": "Übersicht",
					"outcome": [
						"..."
					]
				},
				{
					"name": "Methoden",
					"title": "Methoden",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben sind die folgenden zwei Java-Methoden:\n<code>\npublic static int a() {\n &nbsp;&nbsp;int x = 7;\n &nbsp;&nbsp;System.out.println(x);  // Pos #1\n &nbsp;&nbsp;int y = 2 * b();\n &nbsp;&nbsp;System.out.println(x);  // Pos #2\n &nbsp;&nbsp;return y;\n }\n \n public static int b() {\n &nbsp;&nbsp;int x = 10;\n &nbsp;&nbsp;System.out.println(x);  // Pos #3\n &nbsp;&nbsp;x = x + 1;\n &nbsp;&nbsp;System.out.println(x);  // Pos #4\n &nbsp;&nbsp;return 2*x+1;\n }\n</code>\nGeben Sie für den Methodenaufruf <code>a();</code> den Wert der Variablen <code>x</code> jeweils an den folgenden Positionen an!\n\nPos #1: |~7 ; 8 ; 9 ; 10 ; 11 ; 12|\nPos #2: |7 ; 8 ; 9 ; ~10 ; 11 ; 12|\nPos #3: |7 ; 8 ; 9 ; 10 ; ~11 ; 12|\nPos #4: |~7 ; 8 ; 9 ; 10 ; 11 ; 12|\n\nGeben Sie für den Methodenaufruf <code>a();</code> die Reihenfolge der <code>System.out.println(x);</code> Aufrufe an. Geben Sie dazu für jede Position die Reihenfolgennummer an! (D.h. 1 für die erste Ausgabe, 2 für die zweite usw.)!\n\nPos #1: |~1 ; 2 ; 3 ; 4|\nPos #2: |1 ; 2 ; 3 ; ~4|\nPos #3: |1 ; ~2 ; 3 ; 4|\nPos #4: |1 ; 2 ; ~3 ; 4|\n\nGeben Sie für den Methodenaufruf <code>a();</code> den Rückgabewert an! |7 ; 10 ; 11 ; 20 ; ~46|"
						}
					]
				},
				{
					"name": "Parameter",
					"title": "Parameter",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben ist die folgende Methode:\n<code>\npublic static int ifmethod (boolean a, boolean b) { \n &nbsp; &nbsp; if (a) { \n &nbsp; &nbsp; &nbsp; &nbsp; return 1; \n &nbsp; &nbsp; } else if (a && b) { \n &nbsp; &nbsp; &nbsp; &nbsp; return 2; \n &nbsp; &nbsp; } else { \n &nbsp; &nbsp; &nbsp; &nbsp; if (!b) { \n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 3; \n &nbsp; &nbsp; &nbsp; &nbsp; } else { \n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 4; \n &nbsp; &nbsp; &nbsp; &nbsp; } \n &nbsp; &nbsp; } \n }</code>\nGeben Sie die Rückgabewerte für die folgenden Methodenaufrufe an!\n\n<code>ifmethod(true, true);</code> == | ~1 ; 2 ; 3 ; 4 |\n<code>ifmethod(true, false);</code> == | ~1 ; 2 ; 3 ; 4 |\n<code>ifmethod(false, true);</code> == | 1 ; 2 ; 3 ; ~4 |\n<code>ifmethod(false, false);</code> == | 1 ; 2 ; ~3 ; 4 |"
						}
					]
				},
				{
					"name": "Variablen",
					"title": "Variablen",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben ist folgende Java-Klasse:\n<code>\npublic class Variablen {\n  &nbsp; &nbsp; static int i;\n  \n  &nbsp; &nbsp; static void a() {\n  &nbsp; &nbsp; &nbsp; &nbsp; i++; /* #1 */\n  &nbsp; &nbsp; }\n  \n  &nbsp; &nbsp; static void b(int i) {\n  &nbsp; &nbsp; &nbsp; &nbsp; i++; /* #2 */\n  &nbsp; &nbsp; }\n  \n  &nbsp; &nbsp; static void c() {\n  &nbsp; &nbsp; &nbsp; &nbsp; /* #3 */ int i = 3; /* #4 */\n  &nbsp; &nbsp; }\n  \n  &nbsp; &nbsp; public static void main(String[] args) {\n  &nbsp; &nbsp; &nbsp; &nbsp; i=7;\n  &nbsp; &nbsp; &nbsp; &nbsp; a(); &nbsp;/* #5 */;\n  &nbsp; &nbsp; &nbsp; &nbsp; b(5); /* #6 */\n  &nbsp; &nbsp; &nbsp; &nbsp; c();&nbsp; /* #7 */\n &nbsp; &nbsp; }\n  }</code>\n\nGeben sie für die jeweiligen Positionen im Quellcode (z.B. <code>/* #1 */</code>) den aktuellen Wert für <code>i</code> an, wenn die <code>main</code>-Methode der Klasse aufgerufen wird!\n\nPosition #1 : |3 ; 4 ; 5 ; 6 ; 7 ; ~8 |\nPosition #2 : |3 ; 4 ; 5 ; ~6 ; 7 ; 8 |\nPosition #3 : |3 ; 4 ; 5 ; 6 ; 7 ; ~8 |\nPosition #4 : |~3 ; 4 ; 5 ; 6 ; 7 ; 8 |\nPosition #5 : |3 ; 4 ; 5 ; 6 ; 7 ; ~8 |\nPosition #6 : |3 ; 4 ; 5 ; 6 ; 7 ; ~8 |\nPosition #7 : |3 ; 4 ; 5 ; 6 ; 7 ; ~8 |"
						}
					]
				},
				{
					"name": "Rekursion",
					"title": "Rekursion",
					"question": [
						{
							"type": "gap",
							"text": "Gegeben ist die folgende Java-Methode:\n<code>\npublic static void rekursion (int n) {\n &nbsp;&nbsp;System.out.println(n);\n &nbsp;&nbsp;if (n==1) return;\n &nbsp;&nbsp;if (n%2 == 0) {\n &nbsp;&nbsp;&nbsp;&nbsp;rekursion(n/2);\n &nbsp;&nbsp;} else {\n &nbsp;&nbsp;&nbsp;&nbsp;rekursion(3*n+1);\n &nbsp;&nbsp;}\n }</code>\nGeben Sie die ersten vier Zahlen an, due beim Aufruf von <code>rekursion(5);</code> ausgegeben werden!\n\n1. Zahl: |1 ; 2 ; 3 ; 4 ; ~5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 16|\n2. Zahl: |1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; ~16|\n3. Zahl: |1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; ~8 ; 9 ; 10 ; 16|\n4. Zahl: |1 ; 2 ; 3 ; ~4 ; 5 ; 6 ; 7 ; 8 ; 9 ; 10 ; 16|\n\nWieviele Zahlen gibt der Aufruf von <code>rekursion(5);</code> insgesamt aus? |1 ; 2 ; 3 ; 4 ; 5 ; ~6 ; 7 ; 8 ; 9 ; 10 ; 16|"
						}
					]
				},
				{
					"name": "Hanoi",
					"title": "Hanoi",
					"question": [
						{
							"type": "gap",
							"text": "Geben Sie für die nachfolgenden Werte <code>h</code> an, wieviele Scheibenbewegungen bei den Türmen von Hanoi mit der Höhe <code>h</code> (mindestens) benötigt werden!\n\n<code>h=3</code>: | 3 ; 5 ; ~7 ; 9 |\n<code>h=5</code>: | 13 ; 19 ; 25 ; ~31 |\n<code>h=10</code>: | 789 ; ~1023 ; 2034 ; 5432 |"
						}
					]
				}
			]				
		}, {
			"name": "04_OO",
			"title": "Objektorientierung",
			"page": [
				{
					"name": "overview",
					"title": "Übersicht",
					"outcome": [
						"..."
					]
				},
				{
					"name": "Konstruktoren",
					"title": "Konstruktoren", 
					"question": [
						{
							"type": "gap",
							"text": "Gegeben ist die folgende Klasse:\n<code>\nclass Auto {\n &nbsp; int kmZaehler;\n &nbsp; int fahrten;\n \n &nbsp; Auto (int kmZaehler) {\n &nbsp; &nbsp; this (kmZaehler, kmZaehler/10);\n &nbsp; }\n \n &nbsp; Auto (int kmZaehler, int fahrten) {\n &nbsp; &nbsp; this.kmZaehler = kmZaehler;\n &nbsp; &nbsp; this.fahrten = fahrten;\n &nbsp; }\n }</code>\n\nsowie die folgenden drei Objekte:\n<code>\nAuto a1 = new Auto(); \nAuto a2 = new Auto(47); \nAuto a3 = new Auto (52, 3);</code>\n\nGeben Sie die Werte der folgenden Ausdrücke an bzw. Fehler, wenn der Wert oder das Objekt nicht definiert sind!\n<code>a1.kmZaehler</code>: | 0 ; 3 ; 4 ; 5 ; 47 ; 52 ; ~Fehler|\n<code>a2.kmZaehler</code>: | 0 ; 3 ; 4 ; 5 ; ~47 ; 52 ; Fehler|\n<code>a3.kmZaehler</code>: | 0 ; 3 ; 4 ; 5 ; 47 ; ~52 ; Fehler|\n<code>a1.fahrten</code>: | 0 ; 3 ; 4 ; 5 ; 47 ; 52 ; ~Fehler|\n<code>a2.fahrten</code>: | 0 ; 3 ; ~4 ; 5 ; 47 ; 52 ; Fehler|\n<code>a3.fahrten</code>: | 0 ; ~3 ; 4 ; 5 ; 47 ; 52 ; Fehler|"
						}
					]
				},{
					"name": "Methoden_Ueberladen",
					"title": "Methoden und Überladen von Methoden", 
					"question": [
						{
							"type": "gap",
							"text": "Gegeben ist die folgende Java-Klasse:\n<code>\nclass Auto {\n &nbsp;int kmZaehler;\n &nbsp;int fahrten;\n \n &nbsp;void fahren (int entfernung) {\n &nbsp;&nbsp;kmZaehler += entfernung;\n &nbsp;&nbsp;fahrten++;\n &nbsp;}\n \n &nbsp;void fahren (int pos1, int pos2) {\n &nbsp;&nbsp;fahren (pos2>pos1 ? pos2-pos1 : pos1-pos2);\n &nbsp;}\n }</code>\n\n sowie eine Instanz <code>Auto opel = new Auto();</code>.\n Geben Sie für die nachfolgenden Methoden-Aufrufe jeweils an, ob der Aufruf gültig ist!\n<code>opel.fahren(100);</code>: | ~gültig ; nicht gültig |\n <code>opel.fahren(20.0);</code>: | gültig ; ~nicht gültig |\n <code>opel.fahren(30L);</code>: | gültig ; ~nicht gültig |\n <code>opel.fahren(0xFF);</code>: | ~gültig ; nicht gültig |\n <code>opel.fahren(10, 30);</code>: | ~gültig ; nicht gültig |\n <code>opel.fahren(30, 20);</code>: | ~gültig ; nicht gültig |\n <code>opel.fahren(10, 20, 30);</code>: | gültig ; ~nicht gültig |\n <code>opel.fahren(new int[] {1,2});</code>: | gültig ; ~nicht gültig |\n\nWelchen Wert haben die Attribute des Objekts <code>opel</code> nach Ausführung aller gültigen Methodenaufrufe?\n<code>opel.kmZaehler</code>: | 0 ; 100 ; 120 ; 130 ; 150 ; 160 ; 355 ; 365 ; 375 ; ~385 ; 395 |\n<code>opel.fahrten</code>: | 0 ; 1 ; 2 ; 3 ; ~4 ; 5 ; 6 ; 7 ; 8|"
						}, 
						{
							"type": "gap",
							"text": "Gegeben ist folgende Java-Klasse:\n<code>class K {\n  &nbsp; static void x (int a, int b) { } // Methode #1\n  &nbsp; static void x (int a, double b) { } // Methode #2\n  &nbsp; static void x (double a, double b) { } // Methode #3\n }</code>\n\nGeben Sie für die nachfolgenden Methoden-Aufrufe an, welche Methode aufgerufen wird. Falls keine passende Methode existiert, geben Sie Fehler an!\n\n<code>K.x(1,2);</code> | ~Methode #1 ; Methode #2 ; Methode #3 ; Fehler |\n <code>K.x(1.2,3);</code> | Methode #1 ; Methode #2 ; ~Methode #3 ; Fehler |\n <code>K.x(1,2.3);</code> | Methode #1 ; ~Methode #2 ; Methode #3 ; Fehler |\n <code>K.x(1.2,3.4);</code> | Methode #1 ; Methode #2 ; ~Methode #3 ; Fehler |\n <code>K.x(1,'c');</code> | ~Methode #1 ; Methode #2 ; Methode #3 ; Fehler |\n <code>K.x(1.2,'c');</code> | Methode #1 ; Methode #2 ; ~Methode #3 ; Fehler |\n <code>K.x(1,\"s\");</code> | Methode #1 ; Methode #2 ; Methode #3 ; ~Fehler |"
						}
					]
				},
				{
					"name": "Klassen_Attribute_Methoden",
					"title": "Klassen-Attribute und -Methoden", 
					"question": [
						{	
							"type": "gap",
							"text": "Gegeben ist die folgende Java-Klasse:\n<code>\nclass Auto {\n \n &nbsp; int kmZaehler;\n &nbsp; int fahrten1;\n &nbsp; static int fahrten2;\n \n &nbsp; void fahren (int entfernung) {\n &nbsp; &nbsp; kmZaehler += entfernung;\n &nbsp; &nbsp; fahrten1++;\n &nbsp; &nbsp; fahrten2++;\n &nbsp; }\n }</code> \n sowie folgendes Programm:\n<code>Auto bus = new Auto();\n Auto opel = new Auto();\n bus.fahren(100);\n opel.fahren(70);\n bus.fahren(50);</code>\n\nGeben Sie jeweils den Wert der folgenden Ausdrücke an bzw. \"Fehler\", wenn der Ausdruck nicht definiert ist: \n<code>bus.kmZaehler</code>: |0 ; 50 ; 70 ; 100 ; ~120 ; 150 ; 170 ; 220 ; Fehler|\n<code>opel.kmZaehler</code>: |0 ; 50 ; ~70 ; 100 ; 120 ; 150 ; 170 ; 220 ; Fehler|\n<code>Auto.kmZaehler</code>: |0 ; 50 ; 70 ; 100 ; 120 ; 150 ; 170 ; 220 ; ~Fehler|\n<code>bus.fahrten1</code>: |0 ; 1 ; ~2 ; 3 ; 4 ; Fehler|\n<code>opel.fahrten1</code>: |0 ; ~1 ; 2 ; 3 ; 4 ; Fehler|\n<code>Auto.fahrten1</code>: |0 ; 1 ; 2 ; 3 ; 4 ; ~Fehler|\n<code>bus.fahrten2</code>: |0 ; 1 ; 2 ; ~3 ; 4 ; Fehler|\n<code>opel.fahrten2</code>: |0 ; 1 ; 2 ; ~3 ; 4 ; Fehler|\n<code>Auto.fahrten2</code>: |0 ; 1 ; 2 ; ~3 ; 4 ; Fehler|"
						}

					]
				}, 
				{
					"name": "Main",
					"title": "Main-Methode", 
					"question": [
						{	
							"type": "gap",
							"text": "Gegeben ist eine Java-Klasse <code>Echo</code> mit einer Main-Methode <code>public static void main (String[] args) { }</code>. Geben Sie für die folgende Aufrufe der Klasse jeweils an, welchen Wert der Parameter <code>args</code> hat!\n\n<code>java Echo Hello World</code>: |String mit Wert \"Hello World\" ; Array der Länge 1 mit Wert args[0]=\"Hello World\" ; ~Array der Länge 2 mit Wert args[0]=\"Hello\" und args[1]=\"World\"|\n<code>java Echo 'Hello World'</code>: |String mit Wert \"Hello World\" ; ~Array der Länge 1 mit Wert args[0]=\"Hello World\" ; Array der Länge 2 mit Wert args[0]=\"Hello\" und args[1]=\"World\"|"
						}

					]
				}


			]
		}
	]
}
